@page "/add-new"
@using Microsoft.EntityFrameworkCore
@inject IBookRepo Repository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Add New Book</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <MudForm @ref="form" Model="Book" OnValidSubmit="AddBook">
            <MudText Typo="Typo.h5" Class="mb-4">Add New Book</MudText>

            <MudTextField T="string" Label="Title" @bind-Value="Book.Title" Required="true" RequiredError="Title is required!" />

            <MudTextField T="string" Label="Author" @bind-Value="Book.Author" Required="true" RequiredError="Author is required!" />

            <MudDatePicker Label="Date Published" @bind-Date="Book.PublicationDate" Required="true" RequiredError="Publication date is required!" />

            <MudSelect T="Category" Label="Category" @bind-Value="Book.Category" Required="true" RequiredError="Category is required!">
                <MudSelectItem Value="@((Category)0)">Select Category</MudSelectItem>
                @foreach (var category in Enum.GetValues(typeof(Category)))
                {
                    <MudSelectItem Value="@((Category)category)">@category.ToString()</MudSelectItem>
                }
            </MudSelect>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="@(isProcessing || !form.IsValid)">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Submit</MudText>
                }
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private bool isProcessing = false;

    [SupplyParameterFromForm]
    public Books Book { get; set; } = new();

    private async Task AddBook()
    {
        try
        {
            isProcessing = true;
            await form.Validate();

            if (form.IsValid)
            {
                // Log the book details before saving
                Console.WriteLine($"Submitting book: Title={Book.Title}, Author={Book.Author}, " +
                                $"Date={Book.PublicationDate}, Category={Book.Category}");

                await Repository.AddAsync(Book);
                Snackbar.Add("Book added successfully!", Severity.Success);
                Navigation.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }
}